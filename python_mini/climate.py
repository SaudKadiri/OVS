'''
    Title:      PYRHON MINI PROJECT: To implement OpenCV for the cause of climate change.
    Aim:	    To write a program to calculate how much CO2 was generated by cars using computer vision
    @author:    Saud Kadiri (19CO21) and Anas Khan(19CO24) of Group 7
    Theory:
        About OpenCV project:
            1. OpenCV (Open Source Computer Vision Library) is an open source computer vision and machine learning software
            library. OpenCV was built to provide a common infrastructure for computer vision applications and to accelerate
            the use of machine perception in the commercial products. Being a BSD-licensed product, OpenCV makes it easy for
            businesses to utilize and modify the code.
        
            2. The library has more than 2500 optimized algorithms, which includes a comprehensive set of both classic and
            state-of-the-art computer vision and machine learning algorithms. These algorithms can be used to detect and
            recognize faces, identify objects, classify human actions in videos, track camera movements, track moving objects,
            extract 3D models of objects, produce 3D point clouds from stereo cameras, stitch images together to produce a
            high resolution image of an entire scene, find similar images from an image database, remove red eyes from images
            taken using flash, follow eye movements, recognize scenery and establish markers to overlay it with augmented
            reality, etc. OpenCV has more than 47 thousand people of user community and estimated number of downloads
            exceeding 18 million. The library is used extensively in companies, research groups and by governmental bodies.

            3. Along with well-established companies like Google, Yahoo, Microsoft, Intel, IBM, Sony, Honda, Toyota that
            employ the library, there are many startups such as Applied Minds, VideoSurf, and Zeitera, that make extensive
            use of OpenCV. OpenCVâ€™s deployed uses span the range from stitching streetview images together, detecting
            intrusions in surveillance video in Israel, monitoring mine equipment in China, helping robots navigate and
            pick up objects at Willow Garage, detection of swimming pool drowning accidents in Europe, running interactive
            art in Spain and New York, checking runways for debris in Turkey, inspecting labels on products in factories
            around the world on to rapid face detection in Japan.

            4. It has C++, Python, Java and MATLAB interfaces and supports Windows, Linux, Android and Mac OS. OpenCV leans
            mostly towards real-time vision applications and takes advantage of MMX and SSE instructions when available.
            A full-featured CUDAand OpenCL interfaces are being actively developed right now. There are over 500 algorithms
            and about 10 times as many functions that compose or support those algorithms. OpenCV is written natively in C++
            and has a templated interface that works seamlessly with STL containers.

        Installations:
            pip install numpy
            pip install times
            pip install opencv-python
            pip install opencv-contrib-python

        Aim of this project:
            This project uses openCV to detect vehicles and then it counts the number of vehicles that appeared throughout 
            the video; and then shows that how much CO2 will be emmited by each of these travelling for 1 mile 2 miles
            5 miles and then 10 miles. 
            
            This profoundly makes one aware of how using public transport is important and why it must be chosen over '
            private vehicles.

        Formulas references from:
            https://nepis.epa.gov/Exe/ZyNET.exe/P100JPPH.TXT?ZyActionD=ZyDocument&Client=EPA&Index=2011+Thru+2015&Docs=&Query=&Time=&EndTime=&SearchMethod=1&TocRestrict=n&Toc=&TocEntry=&QField=&QFieldYear=&QFieldMonth=&QFieldDay=&IntQFieldOp=0&ExtQFieldOp=0&XmlQuery=&File=D%3A%5Czyfiles%5CIndex%20Data%5C11thru15%5CTxt%5C00000011%5CP100JPPH.txt&User=ANONYMOUS&Password=anonymous&SortMethod=h%7C-&MaximumDocuments=1&FuzzyDegree=0&ImageQuality=r75g8/r75g8/x150y150g16/i425&Display=hpfr&DefSeekPage=x&SearchBack=ZyActionL&Back=ZyActionS&BackDesc=Results%20page&MaximumPages=1&ZyEntry=1&SeekPage=x&ZyPURL
            https://qz.com/1267709/every-google-search-results-in-co2-emissions-this-real-time-dataviz-shows-how-much/
            https://nj1015.com/how-many-miles-do-you-drive-each-day/#:~:text=First%2Dyear%20data%2C%20collected%20from,totals%2010%2C658%20miles%20per%20year.

'''

import cv2
import numpy as np
from time import sleep

class SaveClimate:
    min_width = 80 # Minimum rectangle width
    min_height = 80  # Minimum rectangle height
    offset = 6 # Allowable error between pixel
    line_position = 550 # Count line position
    delay =  60 # FPS from the given video
    detec = []   # list for when a car is detected
    vehicle_count = 0 # variable to count all the detected cars
    # initializing subtractor 
    subtractor = cv2.bgsegm.createBackgroundSubtractorMOG()

    def __init__(self, video_name):
        self.cap = cv2.VideoCapture(video_name)
        
    def main(self):
        while True:
            ret, frame1 = self.cap.read()
            tempo = 1 / self.delay
            sleep(tempo) 
            grey = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
            blur = cv2.GaussianBlur(grey,(3, 3), 5)
            img_sub = self.subtractor.apply(blur)
            dilat = cv2.dilate(img_sub, np.ones((5, 5)))
            kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
            dilatada = cv2.morphologyEx(dilat, cv2.MORPH_CLOSE , kernel)
            dilatada = cv2.morphologyEx(dilatada, cv2.MORPH_CLOSE , kernel)
            contour_no, h = cv2.findContours(dilatada, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
            
            cv2.line(frame1, (25, self.line_position), (1200, self.line_position), (255, 127, 0), 3) 
            for(i,c) in enumerate(contour_no):
                (x, y, w, h) = cv2.boundingRect(c)
                validate_contour_no = (w >=  self.min_width) and (h >=  self.min_height)
                if not validate_contour_no:
                    continue

                cv2.rectangle(frame1, (x, y), (x + w, y + h),(0, 255, 0), 2)        
                center = self.get_center(x, y, w, h)
                self.detec.append(center)
                cv2.circle(frame1, center, 4, (0, 0,255), -1)

                for (x, y) in self.detec:
                    if y < (self.line_position + self.offset) and y > (self.line_position - self.offset):
                        self.vehicle_count += 1
                        cv2.line(frame1, (25, self.line_position), (1200, self.line_position), (0,127,255), 3)  
                        self.detec.remove((x, y))
                        print("car is detected: " + str(self.vehicle_count))
            
            cv2.putText(frame1, "Vehicle Count: " + str(self.vehicle_count), (450, 70), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255),5)
            cv2.imshow("Video Original", frame1)
            cv2.imshow("Detectar", dilatada)

            if cv2.waitKey(1) == 27:
                break

    def get_center(self, x, y, w, h):
        x1 = w // 2
        y1 = h // 2
        cx = x + x1
        cy = y + y1
        return cx, cy

    def close(self):
        cv2.destroyAllWindows()
        self.cap.release()
        return self.vehicle_count


    @classmethod
    def get_video(cls, video_name):
        return cls(video_name)
    
    @staticmethod
    def print_statistics(vehicles):
        print()
        print("Final vehicle count is:", vehicles, end = "\n\n")
        for i in [1, 2, 5, 10, 20, 50]:
            co2_emmited = i * 0.66268 * vehicles * 10
            print(f"In {i} km(s) {co2_emmited} kg of CO2 was emitted. i.e power consumed by {np.floor(co2_emmited)} homes yearly.")
        print()



def main():
    obj = SaveClimate.get_video(input("Video name: "))
    obj.main()
    vehicles = obj.close()
    obj.print_statistics(vehicles)

if __name__ == "__main__":
    main()


'''
    Conclusion:
        Thus, we've used openCV to count number of vehicles and the generated the count of vehicles thus CO2 generated 
        was printed in the terminal window.
        
        Further, we hope that the audience has realised the importance of using Public transport.
'''